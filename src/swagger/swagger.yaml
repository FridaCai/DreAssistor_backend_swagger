---
swagger: "2.0"
info:
  version: "0.0.0"
  title: "DRE API"
host: "localhost:8080"
basePath: "/v1"
schemes:
- "http"
produces:
- "application/json"







paths:
  /authTest:
    get:
      tags:
      - "Test"
      description: "test user auth when taking some actions\n"
      operationId: "authTestGet"
      parameters: 
      - name: "x-access-token"
        in: "header"
        description: "token saved in client localstorage"
        required: false
        type: "string"
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/authTestResponse"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
      x-swagger-router-controller: "AuthTest"




    options:
      tags:
      - "Test"
      description: "preflight for cors \n"
      operationId: "authTestOptions"
      
      responses:
        200:
          description: "Successful response"
      x-swagger-router-controller: "AuthTest"

  /user:
    get:
      tags:
      - "User"
      description: "Login. get token and user meta by password and email\n"
      operationId: "userGET"
      parameters:
      - name: "email"
        in: query
        description: "user email"
        required: true
        type: "string"
      - name: "password"
        in: query
        description: "password"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/getUserResponse"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
      x-swagger-router-controller: "User"
    
    post:
      tags:
      - "User"
      description: "Register \n"
      operationId: "userPOST"
      parameters:
      - name: "user"
        in: "body"
        description: "user email and password"
        required: true
        schema:
          $ref: "#/definitions/postUserRequest"
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/postUserResponse"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
      x-swagger-router-controller: "User"


    options:
      tags:
      - "User"
      description: "preflight for cors \n"
      operationId: "userOptions"
      
      responses:
        200:
          description: "Successful response"
      x-swagger-router-controller: "User"

      
  /project:
    post:
      tags:
      - "Project"
      description: ""
      operationId: "insertProject"
      parameters:
      
      - name: "project"
        in: "body"
        description: "insert project"
        required: true
        schema:
          $ref: "#/definitions/postProjectRequest"
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/postProjectResponse"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
      x-swagger-router-controller: "Project"

    options:
      tags:
      - "Project"
      description: "preflight for cors \n"
      operationId: "projectOptions"
      responses:
        200:
          description: "Successful response"
      x-swagger-router-controller: "Project"
    
    get:
      tags:
      - "Project"
      description: ""
      operationId: "findProjects"
      parameters:
      - name: "userId"
        in: query
        description: "project ownerId"
        required: false
        type: "integer"
      
      responses:
        200:
          description: "Successful response"
          schema:
            type: array
            items:
              $ref: '#/definitions/project'
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
      x-swagger-router-controller: "Project"

  /project/{id}:
    get:
      tags:
      - "Project"
      description: ""
      operationId: "findProjectById"
      parameters:
      - name: id
        in: path
        description: "project id"
        required: true
        type: "integer"
      
      responses:
        200:
          description: "Successful response"
          schema:
            type: array
            items:
              $ref: '#/definitions/project'
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
      x-swagger-router-controller: "Project"

    delete:
        tags:
        - "Project"
        description: ""
        operationId: "deleteProjectById"
        parameters:
        - name: id
          in: path
          description: "project id"
          required: true
          type: "integer"
        - name: restore
          in: query
          description: "restore deleted project"
          required: false
          type: boolean

        responses:
          200:
            description: "unexpected error"
            schema:
              $ref: "#/definitions/errorModel"
        x-swagger-router-controller: "Project"



    put:
      tags:
      - "Project"
      description: ""
      operationId: "updateProject"
      parameters:
      - name: id
        in: path
        description: "project id"
        required: true
        type: "integer"
      - name: "project"
        in: "body"
        description: "update project"
        required: true
        schema:
          $ref: "#/definitions/postProjectRequest"
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/postProjectResponse"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
      x-swagger-router-controller: "Project"
      
      
    options:
      tags:
      - "Project"
      description: "preflight for cors \n"
      operationId: "projectOptions2"
      parameters:
      - name: id
        in: path
        description: "project id"
        required: true
        type: "integer"
      responses:
        200:
          description: "Successful response"
      x-swagger-router-controller: "Project"


  /task/{id}:
    put:
      tags:
      - "Task"
      description: "modify task"
      operationId: "updateTask"
      parameters:
      - name: "id"
        in: "path"
        description: "task id"
        required: true
        type: "integer"
      - name: "task"
        in: "body"
        description: "insert task"
        required: true
        schema:
          $ref: "#/definitions/postTaskRequest"

      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/postTaskResponse"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
      x-swagger-router-controller: "Task"
      
      
    get:
      tags:
      - "Task"
      description: ""
      operationId: "findTaskById"
      parameters:
      - name: "id"
        in: "path"
        description: "get task by id"
        required: true
        type: "integer"
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/task"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
      x-swagger-router-controller: "Task"


    options:
      tags:
      - "Task"
      description: "preflight for cors \n"
      operationId: "taskOptions2"
      parameters:
      - name: "id"
        in: "path"
        description: "get task by id"
        required: true
        type: "integer"
      responses:
        200:
          description: "Successful response"
      x-swagger-router-controller: "Task"


    delete:
      tags:
      - "Task"
      description: ""
      operationId: "deleteTaskById"
      parameters:
      - name: "id"
        in: "path"
        description: ""
        required: true
        type: "integer"

      responses:
        200:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
      x-swagger-router-controller: "Task"

  /task:
    post:
      tags:
      - "Task"
      description: ""
      operationId: "insertTask"
      parameters:
      - name: "task"
        in: "body"
        description: "insert task"
        required: true
        schema:
          $ref: "#/definitions/postTaskRequest"

      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/postTaskResponse"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
      x-swagger-router-controller: "Task"
      
    options:
      tags:
      - "Task"
      description: "preflight for cors \n"
      operationId: "taskOptions"
      responses:
        200:
          description: "Successful response"
      x-swagger-router-controller: "Task"


  /statical:
    options:
      tags:
      - "Statical"
      description: "preflight for cors \n"
      operationId: "staticalOptions"
      responses:
        200:
          description: "Successful response"
      x-swagger-router-controller: "Statical"

    get:
      tags:
      - "Statical"
      description: ""
      operationId: "getStaticalData"
      parameters:
      - name: "projectCreator"
        in: query
        description: "filter statical data by project creator"
        required: false
        type: "integer"
      - name: "taskType"
        in: query
        description: "filter statical data by task type"
        required: false
        type: "integer"
      - name: "searchClause"
        in: query
        description: "filter statical data by search clause"
        required: false
        type: "string"

      responses:
        200:
          description: "Successful response"
          schema:
            type: array
            items:
              $ref: '#/definitions/project'
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
      x-swagger-router-controller: "Statical"



















  /statical/task/{id}:
    options:
      tags:
      - "Statical"
      description: "preflight for cors \n"
      operationId: "findStaticalTaskByIdOptions"
      parameters:
      - name: "id"
        in: "path"
        description: "get statical task by id"
        required: true
        type: "integer"
      responses:
        200:
          description: "Successful response"
      x-swagger-router-controller: "Statical"

    get:
      tags:
      - "Statical"
      description: ""
      operationId: "findStaticalTaskById"
      parameters:
      - name: "id"
        in: "path"
        description: "get task detail for statical purpose"
        required: true
        type: "integer"
      
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: '#/definitions/task'
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
      x-swagger-router-controller: "Statical"








  /statical/engine/{id}:
    options:
      tags:
      - "Statical"
      description: "preflight for cors \n"
      operationId: "findStaticalEngineByIdOptions"
      parameters:
      - name: "id"
        in: "path"
        description: "get statical engine by id"
        required: true
        type: "integer"
      responses:
        200:
          description: "Successful response"
      x-swagger-router-controller: "Statical"

    get:
      tags:
      - "Statical"
      description: ""
      operationId: "findStaticalEngineById"
      parameters:
      - name: "id"
        in: "path"
        description: "get engine detail for statical purpose"
        required: true
        type: "integer"
      
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: '#/definitions/engine'
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
      x-swagger-router-controller: "Statical"






  /statical/project/{id}:
    options:
      tags:
      - "Statical"
      description: "preflight for cors \n"
      operationId: "findStaticalProjectByIdOptions"
      parameters:
      - name: "id"
        in: "path"
        description: "get project by id"
        required: true
        type: "integer"
      responses:
        200:
          description: "Successful response"
      x-swagger-router-controller: "Statical"
    get:
      tags:
      - "Statical"
      description: ""
      operationId: "findStaticalProjectById"
      parameters:
      - name: "id"
        in: "path"
        description: "get project detail for statical purpose"
        required: true
        type: "integer"
      
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: '#/definitions/project'
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
      x-swagger-router-controller: "Statical"







definitions:
  authTestResponse:
    type: "object"
    required: 
    - errCode
    - user
    properties:
      errCode:
        type: integer
        format: int32
      user: 
        $ref: "#/definitions/user"


  getUserResponse:
    type: "object"
    required: 
    - errCode
    - user
    - token
    - expires
    properties:
      errCode:
        type: integer
        format: int32
      user: 
        $ref: "#/definitions/user"
      token:
        type: string
      expires: 
        type: integer
        format: int64


  postUserRequest:
    type: "object"
    required: 
    - email
    - name
    - password
    properties:
      email:
        type: "string"
      name:
        type: "string"
      password:
        type: "string"



  postUserResponse:
    type: "object"
    required: 
    - errCode
    - userId
    - token
    - expires
    properties:
      errCode:
        type: integer
        format: int32
      userId: 
        type: string
      token:
        type: string
      expires: 
        type: integer
        format: int64


  project:
    type: "object"

  postProjectRequest:
    type: "object"
    required: 
    - creatorId
    - label
    - sorp
    - tags
    - tasks
    - properties
    - engines
    properties:
      creatorId:
        type: integer
      label:
        type: string
      sorp:
        type: integer
      tags:
        type: array
        items:
          $ref: "#/definitions/tag"
      tasks: 
        type: array
        items:
          $ref: "#/definitions/task"
      properties:
        type: array
        items:
          $ref: "#/definitions/property"
      engines:
        type: array
        items:
          $ref: "#/definitions/engine"
  
  engine:
    type: object
    required:
    - properties
    properties:
      id:
        type: integer
      properties:
        type: array
        items:
          $ref: "#/definitions/property"

  tag:
    type: object
    required:
    - label
    - week
    properties:
      label:
        type: string
      week:
        type: integer      
      time:
        type: integer

  
  

  postProjectResponse:
    type: "object"
    required: 
    - errCode
    - projectId
    properties:
      errCode:
        type: integer
        format: int32
      projectId: 
        type: integer
        format: int32



  user: 
    type: "object"
    required:
    - "id"
    - "name"
    - "email"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      email:
        type: "string"
        
        
  errorModel:
    type: "object"
    required:
    - "errCode"
    - "errMsg"
    properties:
      errCode:
        type: "integer"
        format: "int32"
      errMsg:
        type: "string"

  property:
    type: object
    properties:
      dropdown:
        type: string
      text:
        type: string
      value: 
        type: integer
      refKey:
        type: string
      status:
        type: boolean
      label:
        type: string
      image:
        type: array
        items:
          $ref: '#/definitions/image'
      attachment:
        type: array
        items:
          $ref: '#/definitions/attachment'
      curve:
        type: object
        properties:
          caption: 
            type: string
          data: 
            type: array
            items: 
              type: array
              items: 
                type: integer
          series:
            type: array
            items: 
              type: object
              properties:
                label:
                  type: string
                isShowCurve:
                  type: boolean
                data:
                  type: integer

  attachment:
    type: object
    properties:
      label:
        type: string
      url:
        type: string

  image:
    type: object
    properties:
      label:
        type: string
      url:
        type: string


  template:
    type: object
    required:
      - type
    properties:
      type:
        type: integer
      sheetNames:
        type: array
        items:
          type: string
      sheets:
        type: array
        items:
          type: array
          items:
            $ref: '#/definitions/property'

  task:
    type: object
    required:
    - label
    - startTime
    - endTime
    properties:
      label:
        type: string
      startTime:
        type: integer
      endTime:
        type: integer
      desc:
        type: string
      exp: 
        type: string
      priority:
        type: integer
      privacy:
        type: integer
      startWeek:
        type: integer
      endWeek:
        type: integer
      template:
        $ref: "#/definitions/template"



  postTaskRequest:
    type: object
    required:
    - projectId
    - task
    properties:
      projectId:
        type: integer
      task:
        $ref: "#/definitions/task"
      

  postTaskResponse:
    type: "object"