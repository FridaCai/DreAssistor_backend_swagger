---
swagger: "2.0"
info:
  version: "0.0.0"
  title: "DRE API"
host: "localhost:8080"
basePath: "/v1"
schemes:
- "http"
produces:
- "application/json"







paths:
  /authTest:
    get:
      tags:
      - "Test"
      description: "test user auth when taking some actions\n"
      operationId: "authTestGet"
      parameters: 
      - name: "x-access-token"
        in: "header"
        description: "token saved in client localstorage"
        required: false
        type: "string"
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/authTestResponse"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
      x-swagger-router-controller: "AuthTest"




    options:
      tags:
      - "Test"
      description: "preflight for cors \n"
      operationId: "authTestOptions"
      
      responses:
        200:
          description: "Successful response"
      x-swagger-router-controller: "AuthTest"

  /user:
    get:
      tags:
      - "User"
      description: "Login. get token and user meta by password and email\n"
      operationId: "userGET"
      parameters:
      - name: "email"
        in: "query"
        description: "user email"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "password"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/getUserResponse"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
      x-swagger-router-controller: "User"
    
    post:
      tags:
      - "User"
      description: "Register \n"
      operationId: "userPOST"
      parameters:
      - name: "user"
        in: "body"
        description: "user email and password"
        required: true
        schema:
          $ref: "#/definitions/postUserRequest"
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/postUserResponse"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
      x-swagger-router-controller: "User"


    options:
      tags:
      - "User"
      description: "preflight for cors \n"
      operationId: "userOptions"
      
      responses:
        200:
          description: "Successful response"
      x-swagger-router-controller: "User"

      
  /project:
    post:
      tags:
      - "Project"
      description: ""
      operationId: "projectPOST"
      parameters:
      - name: "project"
        in: "body"
        description: "add project"
        required: true
        schema:
          $ref: "#/definitions/postProjectRequest"
      responses:
        200:
          description: "Successful response"
          schema:
            $ref: "#/definitions/postProjectResponse"
        default:
          description: "unexpected error"
          schema:
            $ref: "#/definitions/errorModel"
      x-swagger-router-controller: "Project"
      
    options:
      tags:
      - "Project"
      description: "preflight for cors \n"
      operationId: "projectOptions"
      responses:
        200:
          description: "Successful response"
      x-swagger-router-controller: "Project"


definitions:
  authTestResponse:
    type: "object"
    required: 
    - errCode
    - user
    properties:
      errCode:
        type: integer
        format: int32
      user: 
        $ref: "#/definitions/user"
  getUserResponse:
    type: "object"
    required: 
    - errCode
    - user
    - token
    - expires
    properties:
      errCode:
        type: integer
        format: int32
      user: 
        $ref: "#/definitions/user"
      token:
        type: string
      expires: 
        type: integer
        format: int64
  postUserRequest:
    type: "object"
    required: 
    - email
    - name
    - password
    properties:
      email:
        type: "string"
      name:
        type: "string"
      password:
        type: "string"

  postUserResponse:
    type: "object"
    required: 
    - errCode
    - userId
    - token
    - expires
    properties:
      errCode:
        type: integer
        format: int32
      userId: 
        type: string
      token:
        type: string
      expires: 
        type: integer
        format: int64



  postProjectRequest:
    type: "object"
    required: 
    - creatorId
    - tags
    #- tasks
    properties:
      creatorId:
        type: integer
      tags:
        type: array
        items:
          $ref: "#/definitions/tag"
      tasks: 
        type: array
        items:
          $ref: "#/definitions/task"
        
  
  tag:
    type: object
    required:
    - label
    - time
    - week
    properties:
      label:
        type: string
      time:
        type: integer
      week:
        type: integer
  
  task:
    type: object
    required:
    - label
    - startTime
    - endTime
    - desc
    - priority
    - exp
    - startWeek
    - endWeek
    
    #- template
    properties:
      label:
        type: string
      startTime:
        type: integer
      endTime:
        type: integer
      startWeek:
        type: integer
      endWeek:
        type: integer
      desc: 
        type: string
      exp:
        type: string
      priority:
        type: integer


  postProjectResponse:
    type: "object"
    required: 
    - errCode
    - projectId
    properties:
      errCode:
        type: integer
        format: int32
      projectId: 
        type: integer
        format: int32



  user: 
    type: "object"
    required:
    - "id"
    - "name"
    - "email"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      email:
        type: "string"
  errorModel:
    type: "object"
    required:
    - "errCode"
    - "errMsg"
    properties:
      errCode:
        type: "integer"
        format: "int32"
      errMsg:
        type: "string"
